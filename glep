#!/usr/bin/awk -f

# glep v 1.5.1
# Â©2023 barcek
# License: MIT
# @ github.com
# /barcek/glep

# Run three times per initial command,
# each run being a single named stage,
# all but no. 3 then running the next:
# 1. 'list' (BEGIN; runs no. 2)
# 2. 'grep' (BEGIN & LOOPS; runs no. 3)
# 3. 'echo' (LOOPS)
#
# Arguments to no. 1 are search terms,
# used by default to filter 'git log';
# any may also be a prefixed author or
# commit object name for use in 'show'

BEGIN { # incl. entire list stage

  # set default values
  dir_root = "../"
  # - specific arg formats
  arg_pre_base     = "="
  arg_pre_base_len = length(arg_pre_base)
  #   - commit object name
  arg_name_pre     = arg_pre_base "#"
  arg_name_pre_len = length(arg_name_pre)
  arg_name_len     = arg_name_pre_len + 7 # commit object name ([0-9a-f]{7})
  #   - author
  arg_auth_pre     = arg_pre_base "@"
  arg_auth_pre_len = length(arg_auth_pre)

  stage = stage ? stage : "list"

  if("list" == stage) {

    # handle non-provision of search terms
    if(ARGC < 2) { print "No search term provided" > "/dev/stderr"; exit 1 }

    # extract specifically formatted args,
    # consolidating remaining search terms
    for(i = 1; i < length(ARGV); i++) {
      # consolidate if not specially formatted
      split(ARGV[i], base_arr, arg_pre_base)
      if(length(base_arr[2]) != length(ARGV[i]) - arg_pre_base_len) {
        terms_arr[j++] = ARGV[i]
        continue
      }
      # extract if commit object name
      if(arg_name_len == length(ARGV[i])) {
        split(ARGV[i], name_arr, arg_name_pre)
        if(length(name_arr[2]) == arg_name_len - arg_name_pre_len) {
          name_str = name_arr[2]
          continue
        }
      }
      # extract if author
      split(ARGV[i], auth_arr, arg_auth_pre)
      if(length(auth_arr[2]) == length(ARGV[i]) - arg_auth_pre_len) {
        auth_str = auth_arr[2]
        continue
      }
      # else consolidate
      terms_arr[j++] = ARGV[i]
    }
    # comma-separate any terms beyond name
    terms_str = "\"" terms_arr[0] "\""
    for(i = 1; i < length(terms_arr); i++) {
      terms_str = terms_str ",\"" terms_arr[i] "\""
    }
    # pipe list of dirnames to grep stage
    system(\
      "ls -F " dir_root " | glep -v stage=grep"\
                               " -v terms=" terms_str\
                               " -v  name="  name_str\
                               " -v  auth="  auth_str\
    )
    exit 0
  }

  if("grep" == stage) {
    # build grep string for terms passed
    cmd_grep_col = !name ? "always" : "never"
    split(terms, terms_arr, ",")
    for(i = 1; i <= length(terms_arr); i++) {
      cmd_grep = cmd_grep " | grep --color=" cmd_grep_col " \"" terms_arr[i] "\""
    }
  }
}

# LOOPS, for grep and echo stages

"grep" == stage && $0 ~ /\/$/ {

  dir_next = dir_root $0

  # set command to find git repositories
  cmd_find = "cd " dir_next " && ls -a | grep -E '^.git$' > /dev/null"
  # set command for full pipeline per commit object name
  cmd_full = !name ? cmd_find "&& matches=$("\
                                            "git log --branches=*"\
                                                   " --author=" auth\
                                                   " --oneline"\
                                                   " --format=\"%S | %as %an | %h %s\"" cmd_grep\
                                          ") "\
                              "&& cd - > /dev/null "\
                              "&& echo \"$matches\" | glep -v stage=echo"\
                                                         " -v path=" dir_next\
                   : cmd_find "&& git show --color=always " name " 2> /dev/null " cmd_grep
  system(cmd_full)
}

"echo" == stage {
  # format and output matches for terms
  print "\033[1m" path "\033[0m" $0
}

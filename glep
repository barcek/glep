#!/usr/bin/gawk -f

# glep v1.17.0
# Â©2023 barcek
# License: MIT
# @ github.com
# /barcek/glep

# Assumes the use of a POSIX shell and
# the presence of Gawk (AWK) and Git,
# plus fold, grep, head, ls, sed,
# tail and tr

# Runs by default three times for each
# initial command, with each run being
# a single named stage using variously
# the BEGIN block and intrinsic LOOPS,
# all but no. 3 then running the next:
# 1. 'list' (BEGIN only; runs no. 2)
# 2. 'grep' (BEGIN & LOOPS; runs no. 3)
# 3. 'echo' (primarily LOOPS)
#
# Arguments to no. 1 are search terms,
# used by default to filter 'git log',
# or flags, each indicating an option
#
# Any term may be prefixed to provide
# the commit author or an alternative
# root directory or log format string,
# or commit object name for 'git show'

BEGIN { # incl. entire list stage

  defaults_set() # settings - initially root directory and format string for log output
                 # variants - prefixed search terms (t) and option flags (f)
                 # txt_help - help text

  stage = stage ? stage : "list"

  if("list" == stage) {

    # handle non-provision of search terms
    if(ARGC < 2) help_display("No search term provided")

    # accrue base search terms, handling any variants
    for(i = 1; i < length(ARGV); i++) {
      # handle if variant
      if(term_handle(ARGV[i])) continue
      if(flag_handle(ARGV[i])) continue
      # else accrue base
      base_arr[j++] = ARGV[i]
    }
    # comma-separate any accrued bar name
    settings["base"] = "\"" base_arr[0] "\""
    for(i = 1; i < length(base_arr); i++) {
      settings["base"] = settings["base"] ",\"" base_arr[i] "\""
    }
    # ensure separator ends root directory
    split(settings["root"], path_arr, "/")
    settings["root"] = !length(path_arr[length(path_arr)]) ? settings["root"] : settings["root"] "/"
    # pipe list of dirnames to grep stage
    system(\
      "ls -F " settings["root"] " | glep -v stage=grep"\
                               " -v  base="   settings["base"]\
                               " -v  rgxe="   settings["rgxe"]\
                               " -v  prvw="   settings["prvw"]\
                               " -v  list="   settings["list"]\
                               " -v  root="   settings["root"]\
                               " -v  name="   settings["name"]\
                               " -v  auth="   settings["auth"]\
                               " -v  form=\"" settings["form"] "\""\
    )
    exit 0
  }

  if("grep" == stage) {
    # build grep string for base terms passed
    cmd_grep_col = !name ? "always" : "never"
    cmd_grep_ext = !rgxe ? ""       : " -E"
    split(base, base_arr, ",")
    for(i = 1; i <= length(base_arr); i++) {
      cmd_grep = cmd_grep " | grep --color=" cmd_grep_col cmd_grep_ext " \"" base_arr[i] "\""
    }
    # run commands for root directory
    !list\
      ? grep_perform(settings["root"])\
      : list_perform(settings["root"])
  }
}

# LOOPS, for grep and echo stages

"grep" == stage && $0 ~ /\/$/ {
  # run commands for next subdirectory
  dir_next = settings["root"] $0
  !list\
    ? grep_perform(dir_next)\
    : list_perform(dir_next)
}

"echo" == stage {
  # format and output matches for terms
  print "\033[1m" path "\033[0m" $0
}

# UTILS

# - task performance

# build and run pipeline performing grep stage tasks
function grep_perform(dir_dest) {
  # set base command to find git directory
  cmd_find = "cd " dir_dest " && ls -a | grep -E '^.git$' > /dev/null"
  # set full command then run:
  # - for 'git log' if no commit object name
  if(!name) {
    cmd_auth = auth ? " --author=" auth : ""
    cmd_full = cmd_find " && matches=$("\
                                       "git log --branches=*"\
                                              cmd_auth\
                                              " --oneline"\
                                              " --format=\"" form "\"" cmd_grep\
                                     ") "\
                        "&& cd - > /dev/null "\
                        "&& echo \"$matches\" | glep -v stage=echo"\
                                                   " -v path=" dir_dest
    if(prvw) { print cmd_full; exit 0 }
    while((cmd_full) | getline line) print line
  }
  # - for 'git show' otherwise, allowing for use of SIGINT
  else {
    cmd_full = cmd_find " && git show --color=always " name " 2> /dev/null" cmd_grep
    if(prvw) { print cmd_full; exit 0 }
    system(cmd_full)
  }
}

# run pipeline to print list of git repositories then exit
function list_perform(dir_dest) {
  cmd_list = "cd " dir_dest " && ls -a | grep -E '^.git$' > /dev/null && echo " dir_dest
  if(prvw) { print cmd_list; exit 0 }
  system(cmd_list)
}

# - variant handling

# return term unprefixed if special else empty string
function term_extract(arg, pre) {
  split(arg, arr, pre)
  return length(arr[2]) == length(arg) - length(pre) ? arr[2] : ""
}

# handle any prefixed term set and confirm done
function term_handle(arg) {
  for(term_key in variants["t"]) {
    # remove term prefix if present, retrying for any alternative
    term = term_extract(arg, variants["t"][term_key]["pre"])
    if(!term) term = term_extract(arg, variants["t"][term_key]["pre_alt"])
    # handle any early continuation
    if(!term) continue
    if(variants["t"][term_key]["len"] && variants["t"][term_key]["len"] != length(arg)) continue
    # match found - set and confirm
    settings[term_key] = term
    return "True"
  }
}

# handle any option application and confirm flag done
function flag_handle(arg) {
  for(flag_key in variants["f"]) {
    if(variants["f"][flag_key]["word"] == ARGV[i] || variants["f"][flag_key]["char"] == ARGV[i]) {
      # match found - apply and confirm
      if("rgxe" == flag_key || "prvw" == flag_key || "list" == flag_key) settings[flag_key] = "true"
      if("vrsn" == flag_key) vrsn_display()
      if("help" == flag_key) help_display()
      if("test" == flag_key) test_perform()
      return "True"
    }
  }
}

# initialize default values
function defaults_set() {
  # general
  settings["root"] = root ? root : "../"
  settings["form"] = "%S | %as %an | %h %s"
  # prefixed search terms (t) and option flags (f)
  variants["pre"] = "="
  # - root directory
  variants["t"]["root"]["pre"] = variants["pre"] "/"
  variants["t"]["root"]["pre_alt"] = variants["pre"] ">"
  variants["t"]["root"]["var"] = "path_to_root"
  variants["t"]["root"]["exp"] = "an alternative root directory (currently '" settings["root"] "')"
  # - commit author
  variants["t"]["auth"]["pre"] = variants["pre"] "@"
  variants["t"]["auth"]["var"] = "author_name"
  variants["t"]["auth"]["exp"] = "the commit author"
  # - format string
  variants["t"]["form"]["pre"] = variants["pre"] "%"
  variants["t"]["form"]["var"] = "format_string"
  variants["t"]["form"]["exp"] = "an alternative format string (currently '" settings["form"] "')"
  # - commit object name
  variants["t"]["name"]["pre"] = variants["pre"] "#"
  variants["t"]["name"]["stem_len"] = 7 # commit object name ([0-9a-f]{7})
  variants["t"]["name"]["len"] = length(variants["t"]["name"]["pre"]) + variants["t"]["name"]["stem_len"]
  variants["t"]["name"]["var"] = "object_name"
  variants["t"]["name"]["exp"] = "a " variants["t"]["name"]["stem_len"] "-character hexadecimal commit object name"
  # - regexp extended
  variants["f"]["rgxe"]["char"] = variants["pre"] "e"
  variants["f"]["rgxe"]["word"] = variants["pre"] "regexp-extended"
  variants["f"]["rgxe"]["desc"] = "use extended regular expressions in search terms"
  # - list
  variants["f"]["list"]["char"] = variants["pre"] "l"
  variants["f"]["list"]["word"] = variants["pre"] "list"
  variants["f"]["list"]["desc"] = "list the git repositories included, not searching"
  # - preview
  variants["f"]["prvw"]["char"] = variants["pre"] "p"
  variants["f"]["prvw"]["word"] = variants["pre"] "preview"
  variants["f"]["prvw"]["desc"] = "show the command for the root directory then exit"
  # - version
  variants["f"]["vrsn"]["char"] = variants["pre"] "v"
  variants["f"]["vrsn"]["word"] = variants["pre"] "version"
  variants["f"]["vrsn"]["desc"] = "show name and version number then exit"
  # - help
  variants["f"]["help"]["char"] = variants["pre"] "h"
  variants["f"]["help"]["word"] = variants["pre"] "help"
  variants["f"]["help"]["desc"] = "show help text, incl. terms and flags, then exit"
  # - test
  variants["f"]["test"]["char"] = variants["pre"] "T"
  variants["f"]["test"]["word"] = variants["pre"] "test"
  variants["f"]["test"]["desc"] = "perform the self-test then exit"
  # help text
  txt_help = txt_help_get()
}

# - option application, remaining

# return name and version number from pipeline run
function core_info_get() {
  "head -n 3 $(command -v glep) | tail -n 1 | gawk '{ print $2 \" \" $3}'" | getline core_info
  return core_info
}

# print name and version number then exit
function vrsn_display() {
  print core_info_get()
  exit 0
}

# print help text with any error message then exit
function help_display(msg_err) {
  insert = msg_err ? "Error: " msg_err "\n" : ""
  stream = msg_err ? "stderr" : "stdout"
  print insert txt_help > "/dev/" stream
  exit msg_err ? 1 : 0
}

function txt_help_get() {
  width_gen = 74
  # - add title line
  core_info = core_info_get()
  diff = width_gen - length(core_info) - 2
  indt = diff / 2 - 0.5
  rmdr = diff % 2
  for(i = 0; i < indt; i++)        fill_l = fill_l "-"
  for(i = 0; i < indt + rmdr; i++) fill_r = fill_r "-"
  txt_title =  fill_l " " core_info " " fill_r "\n"
  # - add usage lines
  txt_usage = "Usage: glep <search_term>[ ...] "\
                "["  variants["f"]["rgxe"]["word"] "/" variants["f"]["rgxe"]["char"] "] "\
                "["  variants["f"]["prvw"]["word"] "/" variants["f"]["prvw"]["char"] "] "\
                "[ " variants["f"]["list"]["word"] "/" variants["f"]["list"]["char"] "]\n"\
              "            "\
                "/ " variants["f"]["vrsn"]["word"] "/" variants["f"]["vrsn"]["char"] " "\
                "/ " variants["f"]["help"]["word"] "/" variants["f"]["help"]["char"] " "\
                "/ " variants["f"]["test"]["word"] "/" variants["f"]["test"]["char"] "\n"
  # - add term lines
  txt_terms = "Terms:\n Any search term may be one of the following prefixed instances:\n"
  #   get max term parts length for term line spacing
  for(item in variants["t"]) {
    if(item == "pre") continue
    parts_l = length(variants["t"][item]["pre"]) + length(variants["t"][item]["var"])
    space_c = parts_l > space_c ? parts_l : space_c
  }
  for(item in variants["t"]) {
    if(item == "pre") continue
    parts_l = length(variants["t"][item]["pre"]) + length(variants["t"][item]["var"])
    spacing = sprintf("%" space_c - parts_l + 2 "s", "")
    txt_terms = txt_terms "  " variants["t"][item]["pre"] "<" variants["t"][item]["var"] ">" spacing variants["t"][item]["exp"] "\n"
  }
  # - add flag lines
  txt_flags = "Flags:\n"
  #   get max flag pair length for flag line spacing
  for(item in variants["f"]) {
    pairs_l = length(variants["f"][item]["char"]) + 2 + length(variants["f"][item]["word"])
    space_c = pairs_l > space_c ? pairs_l : space_c
  }
  for(item in variants["f"]) {
    pairs_l = length(variants["f"][item]["char"]) + 2 + length(variants["f"][item]["word"])
    spacing = sprintf("%" space_c - pairs_l + 2 "s", "")
    txt_flags = txt_flags "  " variants["f"][item]["char"] ", " variants["f"][item]["word"] spacing variants["f"][item]["desc"] "\n"
  }
  # - add summary lines
  "head -n 24 $(command -v glep) | tail -n 1 | tr -d '\n#'" | getline txt_smry_body_1
  "head -n 30 $(command -v glep) | tail -n 1 | tr -d '\n#' | sed 's/ or / and with a /' | sed 's/for //'" | getline txt_smry_body_2
  txt_smry = "Summary:\n Search terms are" txt_smry_body_1 "\n" txt_smry_body_2 "\n"
  # - add context lines
  "head -n 12 $(command -v glep) | tail -n 4 | tr -d '\n#' | fold -sw " width_gen " | tr '\n' '#'" | getline txt_ctxt_body
  gsub(/#/, "\n ", txt_ctxt_body)
  txt_ctxt = "Context:\n" txt_ctxt_body
  # - return combined
  return txt_title txt_usage txt_terms txt_flags txt_smry txt_ctxt
}

function note(msg) {
  print msg > "/dev/stderr"
}

function test_case_run(desc, glep, expt) {
  count_case++
  glep | getline rslt
  if(rslt == expt) {
    count_pass++
    note("â PASS: " desc)
  }
  else {
    note("â FAIL: " desc " | expected " rslt " to equal " expt)
  }
}

function test_perform() {

  count_case = 0
  count_pass = 0

  glep_log_base      = "glep =preview a b"
  expt_log_base      = "cd ../ && ls -a | grep -E '^.git$' > /dev/null && matches=$(git log --branches=* --oneline --format=\"%S | %as %an | %h %s\" | grep --color=always \"a\" | grep --color=always \"b\") && cd - > /dev/null && echo \"$matches\" | glep -v stage=echo -v path=../"

  glep_log_word_std  = "glep =preview a b =@test =/./ \"=% [test] %s\" =regexp-extended"
  expt_log_word_std  = "cd ./ && ls -a | grep -E '^.git$' > /dev/null && matches=$(git log --branches=* --author=test --oneline --format=\" [test] %s\" | grep --color=always -E \"a\" | grep --color=always -E \"b\") && cd - > /dev/null && echo \"$matches\" | glep -v stage=echo -v path=./"

  glep_log_word_alt  = "glep =preview a b =@test \"=>./\" \"=% [test] %s\" =regexp-extended"
  expt_log_word_alt  = "cd ./ && ls -a | grep -E '^.git$' > /dev/null && matches=$(git log --branches=* --author=test --oneline --format=\" [test] %s\" | grep --color=always -E \"a\" | grep --color=always -E \"b\") && cd - > /dev/null && echo \"$matches\" | glep -v stage=echo -v path=./"

  glep_log_char      = "glep =p a b =e"
  expt_log_char      = "cd ../ && ls -a | grep -E '^.git$' > /dev/null && matches=$(git log --branches=* --oneline --format=\"%S | %as %an | %h %s\" | grep --color=always -E \"a\" | grep --color=always -E \"b\") && cd - > /dev/null && echo \"$matches\" | glep -v stage=echo -v path=../"

  glep_show_base     = "glep =preview a b =#0a1b2c3"
  expt_show_base     = "cd ../ && ls -a | grep -E '^.git$' > /dev/null && git show --color=always 0a1b2c3 2> /dev/null | grep --color=never \"a\" | grep --color=never \"b\""

  glep_show_word_std = "glep =preview a b =#0a1b2c3 =@test =/./ \"=% [test] %s\" =regexp-extended"
  expt_show_word_std = "cd ./ && ls -a | grep -E '^.git$' > /dev/null && git show --color=always 0a1b2c3 2> /dev/null | grep --color=never -E \"a\" | grep --color=never -E \"b\""

  glep_show_word_alt = "glep =preview a b =#0a1b2c3 =@test \"=>./\" \"=% [test] %s\" =regexp-extended"
  expt_show_word_alt = "cd ./ && ls -a | grep -E '^.git$' > /dev/null && git show --color=always 0a1b2c3 2> /dev/null | grep --color=never -E \"a\" | grep --color=never -E \"b\""

  glep_show_char     = "glep =p a b =#0a1b2c3 =e"
  expt_show_char     = "cd ../ && ls -a | grep -E '^.git$' > /dev/null && git show --color=always 0a1b2c3 2> /dev/null | grep --color=never -E \"a\" | grep --color=never -E \"b\""

  glep_list_word     = "glep =preview =list"
  expt_list_word     = "cd ../ && ls -a | grep -E '^.git$' > /dev/null && echo ../"

  glep_list_char     = "glep =p =l"
  expt_list_char     = "cd ../ && ls -a | grep -E '^.git$' > /dev/null && echo ../"

  glep_str_fail_none = "glep 2>&1 | head -n 1"
  expt_str_fail_none = "Error: No search term provided"

  glep_str_v_c_full  = "glep =v       | grep -E \"glep v([0-9]+\\.){2}[0-9]+\" | wc -l"
  expt_str_v_c_full  = "1"

  glep_str_v_w_full  = "glep =version | grep -E \"glep v([0-9]+\\.){2}[0-9]+\" | wc -l"
  expt_str_v_w_full  = "1"

  glep_str_h_c_form  = "glep =h    | grep -E \"(- glep v|Usage:|Terms:|Flags:|Summary:|Context:)\" | wc -l"
  expt_str_h_c_form  = "6"

  glep_str_h_c_ln_c  = "glep =h    | wc -l"
  expt_str_h_c_ln_c  = "22"

  glep_str_h_w_form  = "glep =help | grep -E \"(- glep v|Usage:|Terms:|Flags:|Summary:|Context:)\" | wc -l"
  expt_str_h_w_form  = "6"

  glep_str_h_w_ln_c  = "glep =help | wc -l"
  expt_str_h_w_ln_c  = "22"

  test_case_run("log/base",      glep_log_base,      expt_log_base)
  test_case_run("log/word/std",  glep_log_word_std,  expt_log_word_std)
  test_case_run("log/word/alt",  glep_log_word_alt,  expt_log_word_alt)
  test_case_run("log/char",      glep_log_char,      expt_log_char)
  note("---------------------")
  test_case_run("show/base",     glep_show_base,     expt_show_base)
  test_case_run("show/word/std", glep_show_word_std, expt_show_word_std)
  test_case_run("show/word/alt", glep_show_word_alt, expt_show_word_alt)
  test_case_run("show/char",     glep_show_char,     expt_show_char)
  note("---------------------")
  test_case_run("list/word",     glep_list_word,     expt_list_word)
  test_case_run("list/char",     glep_list_char,     expt_list_char)
  note("---------------------")
  test_case_run("str/fail/none", glep_str_fail_none, expt_str_fail_none)
  note("---------------------")
  test_case_run("str/v/c/full",  glep_str_v_c_full,  expt_str_v_c_full)
  test_case_run("str/v/w/full",  glep_str_v_w_full,  expt_str_v_w_full)
  note("--------------------")
  test_case_run("str/h/c/form",  glep_str_h_c_form,  expt_str_h_c_form)
  test_case_run("str/h/c/ln_c",  glep_str_h_c_ln_c,  expt_str_h_c_ln_c)
  test_case_run("str/h/w/form",  glep_str_h_w_form,  expt_str_h_w_form)
  test_case_run("str/h/w/ln_c",  glep_str_h_w_ln_c,  expt_str_h_w_ln_c)
  note("--------------------")

  summary = count_pass "/" count_case
  is_pass = count_pass ==  count_case

  note(is_pass ? "â " summary : "â " summary)
  exit is_pass ? 0 : 1
}
